#!/bin/env python

"""This script is the driver script that takes in a parameter file
and parse the fields to generate a pipeline and excute it"""

import configparser
import sys
from cutslib import proj
import importlib

# parse config file
config = configparser.ConfigParser()
print("Reading parameter file: %s" % sys.argv[1])
config.read(sys.argv[1])

# first read the pipeline section which defines the entire program
pconfig = config['pipeline']
cutparam = pconfig.get("cutparam", None)
output_dir = pconfig.get("output_dir", None)
modules = pconfig.get("pipeline").split()

# initialize the project file structure
if cutparam:
    # if cutparam is given, i assume that we want to do simple
    # post-processing for each cut version instead of all
    p = proj.init_post(cutparam, output_dir)
else:
    # if no cutparam is specified, i assume we want to do the
    # final post-processing to work on all cutparams together
    p = proj.init_final()

# create pipeline
init_func = {}
run_func = {}
for m in modules:
    mod_name = config[m].get("module", m)
    mod = importlib.import_module("cutslib.modules.{}".format(mod_name))
    print("Initializing module: %s" % m)
    mod = mod.Module(config[m])
    run_func[m] = mod.run

# run pipeline
for m in modules:
    print("Running module: %s" % m)
    run_func[m](p)
