#!/bin/env python

"""This script is the driver script that takes in a parameter file
and parse the fields to generate a pipeline and excute it"""

from configparser import ConfigParser, ExtendedInterpolation as EI
import sys, os.path as op
from cutslib import proj
from cutslib.modules.command import create_run_func
import importlib

# parse config file
config = ConfigParser(interpolation=EI())
# read default configuration
default_config = op.join(op.dirname(proj.__file__),
                         'modules', 'defaults.ini')
config.read(default_config)
# read configuration specified
print("Reading parameter file: %s" % sys.argv[1])
config.read(sys.argv[1])

# first read the pipeline section which defines the entire program
pconfig = config['pipeline']
cutparam = pconfig.get("cutparam", None)
output_dir = pconfig.get("output_dir", None)
modules = pconfig.get("pipeline").split()

# setup mpi
from mpi4py import MPI
comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()
mpi = size > 1

if rank == 0:
    # initialize the project file structure
    if cutparam:
        # if cutparam is given, i assume that we want to do simple
        # post-processing for each cut version instead of all
        p = proj.init_post(cutparam, output_dir)
    else:
        # if no cutparam is specified, i assume we want to do the
        # final post-processing to work on all cutparams together
        p = proj.init_final()
else:
    p = None

p = comm.bcast(p, root=0)

# synchronize
if mpi: comm.Barrier()

p.comm = comm
p.size = size
p.rank = rank

# create pipeline
run_func = {}
for m in modules:
    # check type of the module
    mod_type = config[m].get("type", "internal")
    if mod_type == "internal":
        # by default load internal modules from cutslib.modules
        mod_name = config[m].get("module", m)
        mod = importlib.import_module("cutslib.modules.{}".format(mod_name))
        print("Initializing module: %s" % m)
        mod = mod.Module(config[m])
        run_func[m] = mod.run
    elif mod_type == 'external':
        # load Module from external file
        # FIXME: note that this supports python 3 only!
        import importlib.machinery
        import importlib.util
        # get path
        mod_path = config[m].get("file")
        if not mod_path:
            raise ValueError("No module path is specified!")
        loader = importlib.machinery.SourceFileLoader('Module', mod_path)
        spec = importlib.util.spec_from_loader(loader.name, loader)
        mod = importlib.util.module_from_spec(spec)
        loader.exec_module(mod)
        mod = mod.Module(config[m])
        run_func[m] = mod.run
    elif mod_type == 'command':
        # instead of loading module, run a given shell command
        run_func[m] = create_run_func(config[m])
    else:
        raise ValueError(f"Unknow module type: {mod_type}")
        print("Supported types: internal, external, command")


# run pipeline
for m in modules:
    # if a module supports mpi, specify it under this option
    mod_mpi = config[m].getboolean("mpi", False)
    # when the module does not want mpi but pipeline is mpi enabled
    # run it with rank 0. For all other cases run it like before
    if not mod_mpi and mpi:
        if rank == 0:
            print("Running module: %s" % m)
            run_func[m](p)
        # synchronize
        if mpi: comm.Barrier()
    else:
        print("Running module: %s" % m)
        run_func[m](p)
        # synchronize
        if mpi: comm.Barrier()
