* cutslib
Utility library for working with ACT cuts. As I get more familiar with 
ACT cuts, this library may significantly change.

Some notation that i used in these codes:
- Routines: main building blocks of cuts pipeline
- Modules: main building blocks of postprocessing pipeline
- Recipes: quick command line tools for various routine work

** Installation
#+BEGIN_SRC bash
pip install -e .
#+END_SRC

** Dependency
Most of the dependency libraries should automatically install, with a few
exceptions that require manual installation
- =moby2=
- =todloop=:
  #+BEGIN_SRC 
  pip install git+https://github.com/guanyilun/todloop
  #+END_SRC

** Recipes
Located in =cuts.recipes=. Notable mentions (such that i don't forget
them myself):
- =cuts.recipes.results=
  - =combine=
    Reduce the output of mpi-based cuts pipeline of a given version (i.e. v3):
    #+BEGIN_SRC bash
    cuts results combine v3
    #+END_SRC
  - =promote=
    Promote the cuts parameters to a new version:
    #+BEGIN_SRC bash
    cuts results promote
    #+END_SRC
    This will find the latest cutparam_v{}.par file and promote it to
    a higher level with replacement of all the version numbers inside.
- =cuts.recipes.run=
  - =submit=:
    submit jobs (on tiger) for cuts pipeline with a given cutparam file (i.e. cutparam_v3.par)
    #+BEGIN_SRC bash
    cuts run submit cutparam_v3.par
    #+END_SRC
- =cuts.recipes.update=
  - =submit=:
    submit jobs (on tiger) for updating cut crits with a given cutparam file (i.e. cutparam_v3.par)
    #+BEGIN_SRC bash
    cuts update submit cutparam_v3.par
    #+END_SRC

** Modules:
Notable mentions
- =collect_crit=: 
  collect the cuts crit for all the TODs processed and generate a
  pickle file for easier processing
- =plot_cuts_thresholds=:
  take the pickle file generated by =collect_crit= and plot histograms
  of each of the cuts crit
- =get_flatfield=:
  generate atmospheric flatfield based on the atmosphere gain
- =plot_ff=:
  plot the flatfields (both planet and atmospheric)
- =plot_ff_binned=:
  same as above but for each pwv bin
- =plot_hits=:
  produce a hits map for the input TODs list
- =plot_killed_array=:
  plot selected cuts crits (mean) on an array plot
- =plot_ld_loading=:
  plot number of live detectors as a function of optical loading
- =plot_live_fraction=:
  plot the fraction that a detector is cut on an array plot
- =plot_planet_cal=:
  plot planet calibration as a function of optical loading
- =plot_resp_hist=:
  plot the histogram of number of detectors with valid responsivity
  from bias-step measurements.
- =plot_rms_gain=:
  produce a 2D histogram of responsivity versus planet flatfield gain
- =report=:
  generate a pdf report summarizing the latest run. It needs
  additional dependencies such as emacs and latex. 
- =debug_patho=:
  pathology debugger (with ipdb inside)
- =export_json=:
  export the pathologies of each TOD into json format for easy visualization 
  using this [[https://github.com/guanyilun/tod_viz][web-based tool]]. 
- =todlist_for_map=:
  generate the list of TODs that is available for mapping

